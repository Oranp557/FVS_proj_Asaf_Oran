MODULE main
VAR
    man_c : 1..8;
    man_r : 1..7;
    box_1_c : 1..8;
    box_1_r : 1..7;
    box_2_c : 1..8;
    box_2_r : 1..7;
    box_3_c : 1..8;
    box_3_r : 1..7;
    goal_1_c : 1..8;
    goal_1_r : 1..7;
    goal_2_c : 1..8;
    goal_2_r : 1..7;
    walls : array 1..7 of array 1..8 of 0..1;
ASSIGN
    init(man_c) := 3;
    init(man_r) := 3;
    init(box_1_c) := 4;
    init(box_1_r) := 3;
    init(box_2_c) := 6;
    init(box_2_r) := 4;
    init(box_3_c) := 3;
    init(box_3_r) := 5;
    goal_1_c := 4;
    goal_1_r := 5;
    goal_2_c := 5;
    goal_2_r := 6;
    walls[1][1] := 1;
    walls[1][2] := 1;
    walls[1][3] := 1;
    walls[1][4] := 1;
    walls[1][5] := 1;
    walls[1][6] := 1;
    walls[1][7] := 1;
    walls[1][8] := 1;
    walls[2][1] := 1;
    walls[2][2] := 0;
    walls[2][3] := 0;
    walls[2][4] := 0;
    walls[2][5] := 0;
    walls[2][6] := 0;
    walls[2][7] := 0;
    walls[2][8] := 1;
    walls[3][1] := 1;
    walls[3][2] := 0;
    walls[3][3] := 0;
    walls[3][4] := 0;
    walls[3][5] := 0;
    walls[3][6] := 0;
    walls[3][7] := 0;
    walls[3][8] := 1;
    walls[4][1] := 1;
    walls[4][2] := 0;
    walls[4][3] := 0;
    walls[4][4] := 1;
    walls[4][5] := 0;
    walls[4][6] := 0;
    walls[4][7] := 0;
    walls[4][8] := 1;
    walls[5][1] := 1;
    walls[5][2] := 0;
    walls[5][3] := 0;
    walls[5][4] := 0;
    walls[5][5] := 0;
    walls[5][6] := 0;
    walls[5][7] := 0;
    walls[5][8] := 1;
    walls[6][1] := 1;
    walls[6][2] := 0;
    walls[6][3] := 0;
    walls[6][4] := 0;
    walls[6][5] := 0;
    walls[6][6] := 0;
    walls[6][7] := 0;
    walls[6][8] := 1;
    walls[7][1] := 1;
    walls[7][2] := 1;
    walls[7][3] := 1;
    walls[7][4] := 1;
    walls[7][5] := 1;
    walls[7][6] := 1;
    walls[7][7] := 1;
    walls[7][8] := 1;
next(man_c) :=
    case
        move = r & (mv_r | push_r) & (man_c < {cols}) : man_c + 1;
        move = l & (mv_l | push_l) & (man_c > 1) : man_c - 1;
        move = u : man_c;
        move = d : man_c;
        TRUE : man_c;
    esac;
next(man_r) :=
    case
        move = r : man_r;
        move = l : man_r;
        move = u & (mv_u | push_u) & (man_r > 1) : man_r - 1;
        move = d & (mv_d | push_d) & (man_r < {rows}) : man_r + 1;
        TRUE : man_r;
    esac;
next(box_1_c) :=
    case
        push_l & (box_1_c < 8) : box_1_c - 1;
        push_r & (box_1_c > 1) : box_1_c + 1;
        TRUE: box_{i+1}_c;
    esac;
next(box_1_r) :=
    case
        push_u & (box_1_r > 1) : box_1_r - 1;
        push_d & (box_1_r < 7) : box_1_r + 1;
        TRUE: box_{i+1}_r;
    esac;
next(box_2_c) :=
    case
        push_l & (box_2_c < 8) : box_2_c - 1;
        push_r & (box_2_c > 1) : box_2_c + 1;
        TRUE: box_{i+1}_c;
    esac;
next(box_2_r) :=
    case
        push_u & (box_2_r > 1) : box_2_r - 1;
        push_d & (box_2_r < 7) : box_2_r + 1;
        TRUE: box_{i+1}_r;
    esac;
next(box_3_c) :=
    case
        push_l & (box_3_c < 8) : box_3_c - 1;
        push_r & (box_3_c > 1) : box_3_c + 1;
        TRUE: box_{i+1}_c;
    esac;
next(box_3_r) :=
    case
        push_u & (box_3_r > 1) : box_3_r - 1;
        push_d & (box_3_r < 7) : box_3_r + 1;
        TRUE: box_{i+1}_r;
    esac;
DEFINE
    mv_r := (move = r) & (man_c < {cols}) & (walls[man_r][man_c + 1] = 0) & !box_on_r;
    mv_l := (move = l) & (man_c > 1) & (walls[man_r][man_c - 1] = 0) & !box_on_l;
    mv_u := (move = u) & (man_r > 1) & (walls[man_r - 1][man_c] = 0) & !box_on_t;
    mv_d := (move = d) & (man_r < {rows}) & (walls[man_r + 1][man_c] = 0) & !box_on_b;
    box_on_r := (man_c + 1 = box_1_c) & (man_r = box_1_r);
    box_on_rp1 := (man_c + 2 = box_1_c) & (man_r = box_1_r);
    box_on_l := (man_c - 1 = box_1_c) & (man_r = box_1_r);
    box_on_lp1 := (man_c - 2 = box_1_c) & (man_r = box_1_r);
    box_on_t := (man_c = box_1_c) & (man_r - 1 = box_1_r);
    box_on_tp1 := (man_c = box_1_c) & (man_r - 2 = box_1_r);
    box_on_b := (man_c = box_1_c) & (man_r + 1 = box_1_r);
    box_on_bp1 := (man_c = box_1_c) & (man_r + 2 = box_1_r);
    box_on_r := (man_c + 1 = box_2_c) & (man_r = box_2_r);
    box_on_rp1 := (man_c + 2 = box_2_c) & (man_r = box_2_r);
    box_on_l := (man_c - 1 = box_2_c) & (man_r = box_2_r);
    box_on_lp1 := (man_c - 2 = box_2_c) & (man_r = box_2_r);
    box_on_t := (man_c = box_2_c) & (man_r - 1 = box_2_r);
    box_on_tp1 := (man_c = box_2_c) & (man_r - 2 = box_2_r);
    box_on_b := (man_c = box_2_c) & (man_r + 1 = box_2_r);
    box_on_bp1 := (man_c = box_2_c) & (man_r + 2 = box_2_r);
    box_on_r := (man_c + 1 = box_3_c) & (man_r = box_3_r);
    box_on_rp1 := (man_c + 2 = box_3_c) & (man_r = box_3_r);
    box_on_l := (man_c - 1 = box_3_c) & (man_r = box_3_r);
    box_on_lp1 := (man_c - 2 = box_3_c) & (man_r = box_3_r);
    box_on_t := (man_c = box_3_c) & (man_r - 1 = box_3_r);
    box_on_tp1 := (man_c = box_3_c) & (man_r - 2 = box_3_r);
    box_on_b := (man_c = box_3_c) & (man_r + 1 = box_3_r);
    box_on_bp1 := (man_c = box_3_c) & (man_r + 2 = box_3_r);
    push_r := (move = r) & (walls[man_r][man_c + 2] = 0) & !box_on_rp1 & box_on_r;
    push_l := (move = l) & (walls[man_r][man_c - 2] = 0) & !box_on_lp1 & box_on_l;
    push_u := (move = u) & (walls[man_r - 2][man_c] = 0) & !box_on_tp1 & box_on_t;
    push_d := (move = d) & (walls[man_r + 2][man_c] = 0) & !box_on_bp1 & box_on_b;
    win := (box_1_c = goal_1_c) & (box_1_r = goal_1_r) & (box_2_c = goal_2_c) & (box_2_r = goal_2_r) & (box_3_c = goal_3_c) & (box_3_r = goal_3_r);
LTLSPEC !F win;
